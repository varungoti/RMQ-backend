import { Repository, DataSource } from 'typeorm';
import { AssessmentSession } from 'src/entities/assessment_session.entity';
import { AssessmentResponse } from 'src/entities/assessment_response.entity';
import { Question } from 'src/entities/question.entity';
import { Skill } from 'src/entities/skill.entity';
import { AssessmentSkillScore } from 'src/entities/assessment_skill_score.entity';
import { SubmitAnswerDto } from 'src/dto/submit-answer.dto';
import { StartAssessmentDto } from 'src/dto/start-assessment.dto';
import { User } from 'src/entities/user.entity';
import { GetNextQuestionResponseDto, AssessmentResponseDto } from 'src/dto/assessment.dto';
import { SkillScoreDto } from 'src/dto/skill-score.dto';
import { AnswerCheckerFactory } from './factories/answer-checker.factory';
export declare class AssessmentService {
    private sessionRepository;
    private responseRepository;
    private questionRepository;
    private skillRepository;
    private scoreRepository;
    private dataSource;
    private userRepository;
    private answerCheckerFactory;
    private readonly logger;
    constructor(sessionRepository: Repository<AssessmentSession>, responseRepository: Repository<AssessmentResponse>, questionRepository: Repository<Question>, skillRepository: Repository<Skill>, scoreRepository: Repository<AssessmentSkillScore>, dataSource: DataSource, userRepository: Repository<User>, answerCheckerFactory: AnswerCheckerFactory);
    submitAnswer(userId: string, submitAnswerDto: SubmitAnswerDto): Promise<AssessmentResponseDto>;
    private validateSessionAndOwnership;
    validateQuestionForSession(session: AssessmentSession, questionId: string): Promise<Question>;
    private createResponseEntity;
    private processSubmissionWithTransaction;
    private updateSessionStatusIfComplete;
    private mapToResponseDto;
    private checkAnswer;
    private _updateSkillScoreTransactional;
    startAssessment(userId: string, startAssessmentDto: StartAssessmentDto): Promise<AssessmentSession>;
    getNextQuestion(userId: string, sessionId: string): Promise<GetNextQuestionResponseDto>;
    calculateOverallScore(sessionId: string): Promise<{
        score: number;
        level: number;
    }>;
    private determineLevel;
    updateSkillScore(userId: string, skillId: string, score: number, level: number): Promise<AssessmentSkillScore>;
    getSessionResult(userId: string, sessionId: string): Promise<SkillScoreDto>;
}
