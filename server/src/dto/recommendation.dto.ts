import { IsUUID, IsOptional, IsNumber, Min, Max, IsString, IsEnum, IsArray, IsUrl, IsBoolean, ValidateNested } from 'class-validator';
import { Type } from 'class-transformer';
import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import { LlmProviderType } from './llm-provider.dto'; // Assuming path
import { Question } from '../entities/question.entity'; // For QuestionPublic
import { Skill } from '../entities/skill.entity'; // For Skill ID in CreateResourceRequest

/**
 * Defines the recommendation type/category
 */
export enum RecommendationType {
  PRACTICE = 'practice',  
  LESSON = 'lesson',      
  VIDEO = 'video',        
  INTERACTIVE = 'interactive', 
  PERSONALIZED = 'personalized',
}

/**
 * Defines the priority level of a recommendation
 */
export enum RecommendationPriority {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  CRITICAL = 'critical',
}

/**
 * DTO for querying recommendations
 */
export class RecommendationQueryDto {
  @ApiPropertyOptional({ description: 'User ID to get recommendations for (Admin/Teacher only)', type: String, format: 'uuid' })
  @IsUUID()
  @IsOptional()
  userId?: string; 

  @ApiPropertyOptional({ description: 'Maximum number of recommendations to return', type: Number, default: 5, minimum: 1, maximum: 50 }) // Increased max
  @IsNumber()
  @Min(1)
  @Max(50) // Increased max
  @IsOptional()
  @Type(() => Number)
  limit?: number = 5; 

  @ApiPropertyOptional({ description: 'Filter by recommendation type', enum: RecommendationType })
  @IsString()
  @IsOptional()
  @IsEnum(RecommendationType, { each: true })
  type?: RecommendationType;

  @ApiPropertyOptional({ description: 'Filter by specific skill ID', type: String, format: 'uuid' })
  @IsUUID()
  @IsOptional()
  skillId?: string;
}

/**
 * DTO for a single recommendation resource
 */
export class RecommendationResourceDto {
  @ApiProperty({ description: 'Unique ID of the resource', format: 'uuid' })
  id: string;

  @ApiProperty({ description: 'Title of the resource' })
  title: string;

  @ApiProperty({ description: 'Description of the resource' })
  description: string;

  @ApiProperty({ description: 'URL of the resource', format: 'url' })
  url: string;

  @ApiProperty({ description: 'Type of resource', enum: RecommendationType })
  type: RecommendationType;

  @ApiProperty({ description: 'Estimated time to complete in minutes' })
  estimatedTimeMinutes: number;

  @ApiProperty({ description: 'Associated tags', type: [String] })
  tags: string[];
}

/**
 * DTO for a recommendation including context and explanation
 */
export class RecommendationDto {
  @ApiProperty({ description: 'Unique ID of the recommendation instance (can be composite)' })
  id: string;

  @ApiProperty({ description: 'ID of the skill being addressed', format: 'uuid' })
  skillId: string;

  @ApiProperty({ description: 'Name of the skill being addressed' })
  skillName: string;

  @ApiProperty({ description: 'Priority of the recommendation', enum: RecommendationPriority })
  priority: RecommendationPriority;

  @ApiProperty({ description: 'User score for the skill at the time of recommendation' })
  score: number;

  @ApiProperty({ description: 'Target score for the skill' })
  targetScore: number;

  @ApiProperty({ description: 'Explanation for the recommendation' })
  explanation: string;

  @ApiProperty({ description: 'Flag indicating if generated by AI' })
  aiGenerated: boolean;

  @ApiProperty({ description: 'List of recommended resources', type: [RecommendationResourceDto] })
  @ValidateNested({ each: true })
  @Type(() => RecommendationResourceDto)
  resources: RecommendationResourceDto[];
}

/**
 * DTO for a set of recommendations with related metadata
 */
export class RecommendationSetDto {
  @ApiProperty({ description: 'User ID the recommendations belong to', format: 'uuid' })
  userId: string;
  
  @ApiProperty({ description: 'List of recommendations', type: [RecommendationDto] })
  @ValidateNested({ each: true })
  @Type(() => RecommendationDto)
  recommendations: RecommendationDto[];
  
  @ApiProperty({ description: 'Timestamp when the recommendations were generated' })
  generatedAt: Date;
  
  @ApiProperty({ description: 'Overall learning progress percentage for related skills', example: 75, minimum: 0, maximum: 100 })
  @IsNumber()
  @Min(0)
  @Max(100)
  overallProgress: number; 
  
  @ApiProperty({ description: 'Summary of the recommendation set', example: 'Focus on improving equation solving skills.' })
  @IsString()
  summary: string;
}

// --- DTOs for Controller-Level Request/Response Bodies ---

/**
 * DTO for creating a recommendation resource (Admin/Teacher)
 */
export class CreateResourceRequestDto {
  @ApiProperty({ description: 'Resource title', example: 'Practice Worksheet: Equations' })
  @IsString()
  title: string;

  @ApiProperty({ description: 'Resource description', example: '10 practice problems on solving linear equations.' })
  @IsString()
  description: string;

  @ApiProperty({ description: 'Link to the resource', example: 'https://example.com/worksheet/456' })
  @IsString()
  @IsUrl()
  url: string;

  @ApiProperty({ description: 'Type of the recommendation resource', enum: RecommendationType, example: RecommendationType.PRACTICE })
  @IsEnum(RecommendationType)
  type: RecommendationType;

  @ApiPropertyOptional({ description: 'Estimated time to complete in minutes', example: 20 })
  @IsNumber()
  @IsOptional()
  @Type(() => Number)
  estimatedTimeMinutes?: number;

  @ApiProperty({ description: 'Target grade level for the resource', example: 8 })
  @IsNumber()
  @Type(() => Number)
  gradeLevel: number;

  @ApiPropertyOptional({ description: 'Metadata tags', type: [String], example: ['algebra', 'practice', 'grade-8'] })
  @IsString({ each: true })
  @IsArray()
  @IsOptional()
  tags?: string[];

  @ApiProperty({ description: 'List of Skill IDs this resource addresses', type: [String], format: 'uuid' })
  @IsUUID('all', { each: true })
  @IsArray()
  skillIds: string[];
}

/**
 * DTO for marking a recommendation complete
 */
export class MarkCompletedRequestDto {
  @ApiProperty({ description: 'Whether the recommendation was helpful' })
  @IsBoolean()
  wasHelpful: boolean;
}

/**
 * DTO for the POST /explain endpoint body
 */
export class SkillGapExplanationRequestDto {
  @ApiProperty({ description: 'ID of the skill to explain the gap for', format: 'uuid' })
  @IsUUID()
  skillId: string;

  @ApiProperty({ description: "The user's current score for the skill", example: 55 })
  @IsNumber()
  @Type(() => Number)
  score: number;

  @ApiPropertyOptional({ description: 'Target User ID (for Admin/Teacher use)', format: 'uuid' })
  @IsUUID()
  @IsOptional()
  userId?: string;
}

/**
 * DTO for the POST /explain endpoint response
 */
export class SkillGapExplanationResponseDto {
    @ApiProperty({ description: 'The generated explanation for the skill gap.', example: 'To improve from 55, focus on practice problems involving multi-step equations.' })
    explanation: string;
}

/**
 * DTO for representing a single item in the user's recommendation history
 */
export class RecommendationHistoryItemDto {
  @ApiProperty({ description: 'History entry unique ID', format: 'uuid' })
  id: string;

  @ApiProperty({ description: 'ID of the associated skill', format: 'uuid' })
  skillId: string;

  @ApiProperty({ description: 'Name of the associated skill', example: 'Solving Quadratic Equations' })
  skillName: string;

  @ApiProperty({ description: 'ID of the recommended resource', format: 'uuid' })
  resourceId: string;

  @ApiProperty({ description: 'Title of the recommended resource', example: 'Video: Factoring Quadratics' })
  resourceTitle: string;

  @ApiProperty({ description: 'Priority of the recommendation when given', enum: RecommendationPriority })
  priority: RecommendationPriority;

  @ApiProperty({ description: 'User score at the time of recommendation' })
  userScore: number;

  @ApiProperty({ description: 'Target score for the recommendation' })
  targetScore: number;

  @ApiProperty({ description: 'Was the recommendation AI generated?' })
  isAiGenerated: boolean;

  @ApiProperty({ description: 'Has the user marked this recommendation as completed?' })
  isCompleted: boolean;

  @ApiPropertyOptional({ description: 'Timestamp when the recommendation was marked completed' })
  completedAt?: Date;

  @ApiPropertyOptional({ description: 'Did the user find this recommendation helpful?' })
  wasHelpful?: boolean;

  @ApiProperty({ description: 'Timestamp when the recommendation was created' })
  createdAt: Date;
}

// Removed problematic re-export, QuestionPublic should be imported from assessment.dto where needed
// export { QuestionPublic } from './assessment.dto'; 